<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerenciador de Tarefas</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #ff6b6b, #ee5a52);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        .nav {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
        }

        .nav-btn {
            background: rgba(255,255,255,0.2);
            border: none;
            color: white;
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .nav-btn:hover, .nav-btn.active {
            background: rgba(255,255,255,0.3);
            transform: translateY(-2px);
        }

        .content {
            padding: 40px;
            min-height: 500px;
        }

        .section {
            display: none;
        }

        .section.active {
            display: block;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }

        .form-group input, .form-group textarea, .form-group select {
            width: 100%;
            padding: 12px;
            border: 2px solid #e1e8ed;
            border-radius: 10px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus, .form-group textarea:focus, .form-group select:focus {
            outline: none;
            border-color: #667eea;
        }

        .btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 10px;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s ease;
            margin-right: 10px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.2);
        }

        .btn-danger {
            background: linear-gradient(135deg, #ff6b6b, #ee5a52);
        }

        .btn-success {
            background: linear-gradient(135deg, #51cf66, #40c057);
        }

        .card {
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            border-left: 5px solid #667eea;
            transition: all 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.15);
        }

        .card h3 {
            color: #333;
            margin-bottom: 10px;
        }

        .card p {
            color: #666;
            margin-bottom: 15px;
        }

        .status-badge {
            display: inline-block;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-pendente {
            background: #fff3cd;
            color: #856404;
        }

        .status-ativo, .status-em-andamento {
            background: #cce5ff;
            color: #004085;
        }

        .status-concluido {
            background: #d4edda;
            color: #155724;
        }

        .priority-badge {
            display: inline-block;
            padding: 3px 10px;
            border-radius: 15px;
            font-size: 0.7rem;
            font-weight: 600;
            margin-left: 10px;
        }

        .priority-baixa {
            background: #d4edda;
            color: #155724;
        }

        .priority-normal {
            background: #fff3cd;
            color: #856404;
        }

        .priority-alta {
            background: #f8d7da;
            color: #721c24;
        }

        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #666;
        }

        .error-message {
            background: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
        }

        .success-message {
            background: #d4edda;
            color: #155724;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        @media (max-width: 768px) {
            .nav {
                flex-wrap: wrap;
            }
            .form-row {
                grid-template-columns: 1fr;
            }
            .grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üéØ Gerenciador de Tarefas</h1>
            <div class="nav">
                <button class="nav-btn active" onclick="showSection('users')">üë• Usu√°rios</button>
                <button class="nav-btn" onclick="showSection('projects')">üìÅ Projetos</button>
                <button class="nav-btn" onclick="showSection('tasks')">‚úÖ Tarefas</button>
                <button class="nav-btn" onclick="showSection('comments')">üí¨ Coment√°rios</button>
            </div>
        </div>

        <div class="content">
            <!-- Se√ß√£o Usu√°rios -->
            <div id="users" class="section active">
                <h2>Gerenciar Usu√°rios</h2>
                
                <div class="form-group">
                    <h3>Criar Novo Usu√°rio</h3>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Nome Completo:</label>
                            <input type="text" id="user-name" placeholder="Digite o nome completo">
                        </div>
                        <div class="form-group">
                            <label>Email:</label>
                            <input type="email" id="user-email" placeholder="Digite o email">
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Senha:</label>
                        <input type="password" id="user-password" placeholder="Digite a senha">
                    </div>
                    <button class="btn" onclick="createUser()">Criar Usu√°rio</button>
                </div>

                <div id="users-list">
                    <div class="loading">Carregando usu√°rios...</div>
                </div>
            </div>

            <!-- Se√ß√£o Projetos -->
            <div id="projects" class="section">
                <h2>Gerenciar Projetos</h2>
                
                <div class="form-group">
                    <h3>Criar Novo Projeto</h3>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Nome do Projeto:</label>
                            <input type="text" id="project-name" placeholder="Digite o nome do projeto">
                        </div>
                        <div class="form-group">
                            <label>Criador:</label>
                            <select id="project-creator">
                                <option value="">Selecione um usu√°rio</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Descri√ß√£o:</label>
                        <textarea id="project-description" placeholder="Descreva o projeto" rows="3"></textarea>
                    </div>
                    <div class="form-group">
                        <label>Status:</label>
                        <select id="project-status">
                            <option value="pendente">Pendente</option>
                            <option value="ativo">Ativo</option>
                            <option value="concluido">Conclu√≠do</option>
                        </select>
                    </div>
                    <button class="btn" onclick="createProject()">Criar Projeto</button>
                </div>

                <div id="projects-list">
                    <div class="loading">Carregando projetos...</div>
                </div>
            </div>

            <!-- Se√ß√£o Tarefas -->
            <div id="tasks" class="section">
                <h2>Gerenciar Tarefas</h2>
                
                <div class="form-group">
                    <h3>Criar Nova Tarefa</h3>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Nome da Tarefa:</label>
                            <input type="text" id="task-name" placeholder="Digite o nome da tarefa">
                        </div>
                        <div class="form-group">
                            <label>Projeto:</label>
                            <select id="task-project">
                                <option value="">Selecione um projeto</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Descri√ß√£o:</label>
                        <textarea id="task-description" placeholder="Descreva a tarefa" rows="3"></textarea>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Prioridade:</label>
                            <select id="task-priority">
                                <option value="baixa">Baixa</option>
                                <option value="normal" selected>Normal</option>
                                <option value="alta">Alta</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Respons√°vel:</label>
                            <select id="task-responsible">
                                <option value="">Selecione um usu√°rio</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Prazo:</label>
                            <input type="date" id="task-deadline">
                        </div>
                        <div class="form-group">
                            <label>Hor√°rio:</label>
                            <input type="time" id="task-time">
                        </div>
                    </div>
                    <button class="btn" onclick="createTask()">Criar Tarefa</button>
                </div>

                <div id="tasks-list">
                    <div class="loading">Carregando tarefas...</div>
                </div>
            </div>

            <!-- Se√ß√£o Coment√°rios -->
            <div id="comments" class="section">
                <h2>Gerenciar Coment√°rios</h2>
                
                <div class="form-group">
                    <h3>Criar Novo Coment√°rio</h3>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Tarefa:</label>
                            <select id="comment-task">
                                <option value="">Selecione uma tarefa</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Autor:</label>
                            <select id="comment-author">
                                <option value="">Selecione um usu√°rio</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Coment√°rio:</label>
                        <textarea id="comment-content" placeholder="Digite seu coment√°rio" rows="4"></textarea>
                    </div>
                    <button class="btn" onclick="submitComment()">Criar Coment√°rio</button>
                </div>

                <div id="comments-list">
                    <div class="loading">Carregando coment√°rios...</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const API_BASE = 'http://localhost:3000/api';

        // Navega√ß√£o entre se√ß√µes
        function showSection(sectionName) {
            document.querySelectorAll('.section').forEach(section => {
                section.classList.remove('active');
            });
            document.querySelectorAll('.nav-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            document.getElementById(sectionName).classList.add('active');
            event.target.classList.add('active');
            
            // Carregar dados da se√ß√£o ativa
            loadSectionData(sectionName);
        }

        function loadSectionData(section) {
            switch(section) {
                case 'users':
                    loadUsers();
                    break;
                case 'projects':
                    loadProjects();
                    loadUsersForSelect();
                    break;
                case 'tasks':
                    loadTasks();
                    loadProjectsForSelect();
                    loadUsersForSelect();
                    break;
                case 'comments':
                    loadComments();
                    loadTasksForSelect();
                    loadUsersForSelect();
                    break;
            }
        }

        // Fun√ß√µes de API
        async function apiCall(endpoint, method = 'GET', data = null) {
            try {
                const config = {
                    method,
                    headers: {
                        'Content-Type': 'application/json',
                    }
                };
                
                if (data) {
                    config.body = JSON.stringify(data);
                }
                
                const response = await fetch(`${API_BASE}${endpoint}`, config);
                
                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Erro na requisi√ß√£o');
                }
                
                if (response.status === 204) {
                    return null;
                }
                
                return await response.json();
            } catch (error) {
                console.error('Erro na API:', error);
                showMessage(error.message, 'error');
                throw error;
            }
        }

        function showMessage(message, type = 'success') {
            const messageDiv = document.createElement('div');
            messageDiv.className = type === 'error' ? 'error-message' : 'success-message';
            messageDiv.textContent = message;
            
            const content = document.querySelector('.content');
            content.insertBefore(messageDiv, content.firstChild);
            
            setTimeout(() => {
                messageDiv.remove();
            }, 3000);
        }

        // USU√ÅRIOS
        async function loadUsers() {
            try {
                const users = await apiCall('/users');
                const usersList = document.getElementById('users-list');
                
                usersList.innerHTML = users.map(user => `
                    <div class="card">
                        <h3>${user.full_name}</h3>
                        <p><strong>Email:</strong> ${user.email}</p>
                        <p><strong>Status:</strong> ${user.is_active ? 'Ativo' : 'Inativo'}</p>
                        <button class="btn btn-danger" onclick="deleteUser(${user.id})">Excluir</button>
                    </div>
                `).join('');
            } catch (error) {
                document.getElementById('users-list').innerHTML = '<div class="error-message">Erro ao carregar usu√°rios</div>';
            }
        }

        async function createUser() {
            const name = document.getElementById('user-name').value;
            const email = document.getElementById('user-email').value;
            const password = document.getElementById('user-password').value;
            
            if (!name || !email || !password) {
                showMessage('Preencha todos os campos', 'error');
                return;
            }
            
            try {
                await apiCall('/users', 'POST', {
                    full_name: name,
                    email: email,
                    password_hash: password
                });
                
                showMessage('Usu√°rio criado com sucesso!');
                document.getElementById('user-name').value = '';
                document.getElementById('user-email').value = '';
                document.getElementById('user-password').value = '';
                loadUsers();
            } catch (error) {
                // Erro j√° tratado no apiCall
            }
        }

        async function deleteUser(id) {
            if (!confirm('Tem certeza que deseja excluir este usu√°rio?')) return;
            
            try {
                await apiCall(`/users/${id}`, 'DELETE');
                showMessage('Usu√°rio exclu√≠do com sucesso!');
                loadUsers();
            } catch (error) {
                // Erro j√° tratado no apiCall
            }
        }

        // PROJETOS
        async function loadProjects() {
            try {
                const projects = await apiCall('/projects');
                const projectsList = document.getElementById('projects-list');
                
                projectsList.innerHTML = projects.map(project => `
                    <div class="card">
                        <h3>${project.nome}</h3>
                        <p>${project.descricao}</p>
                        <p><span class="status-badge status-${project.status}">${project.status}</span></p>
                        <button class="btn btn-danger" onclick="deleteProject(${project.id})">Excluir</button>
                    </div>
                `).join('');
            } catch (error) {
                document.getElementById('projects-list').innerHTML = '<div class="error-message">Erro ao carregar projetos</div>';
            }
        }

        async function loadUsersForSelect() {
            try {
                const users = await apiCall('/users');
                const selects = ['project-creator', 'task-responsible', 'comment-author'];
                
                selects.forEach(selectId => {
                    const select = document.getElementById(selectId);
                    if (select) {
                        const currentValue = select.value;
                        select.innerHTML = '<option value="">Selecione um usu√°rio</option>' +
                            users.map(user => `<option value="${user.id}">${user.full_name}</option>`).join('');
                        select.value = currentValue;
                    }
                });
            } catch (error) {
                console.error('Erro ao carregar usu√°rios para select');
            }
        }

        async function createProject() {
            const name = document.getElementById('project-name').value;
            const description = document.getElementById('project-description').value;
            const status = document.getElementById('project-status').value;
            const creatorId = document.getElementById('project-creator').value;
            
            if (!name || !description || !creatorId) {
                showMessage('Preencha todos os campos obrigat√≥rios', 'error');
                return;
            }
            
            try {
                await apiCall('/projects', 'POST', {
                    nome: name,
                    descricao: description,
                    status: status,
                    criador_id: parseInt(creatorId)
                });
                
                showMessage('Projeto criado com sucesso!');
                document.getElementById('project-name').value = '';
                document.getElementById('project-description').value = '';
                document.getElementById('project-status').value = 'pendente';
                document.getElementById('project-creator').value = '';
                loadProjects();
            } catch (error) {
                // Erro j√° tratado no apiCall
            }
        }

        async function deleteProject(id) {
            if (!confirm('Tem certeza que deseja excluir este projeto?')) return;
            
            try {
                await apiCall(`/projects/${id}`, 'DELETE');
                showMessage('Projeto exclu√≠do com sucesso!');
                loadProjects();
            } catch (error) {
                // Erro j√° tratado no apiCall
            }
        }

        // TAREFAS
        async function loadTasks() {
            try {
                const tasks = await apiCall('/tasks');
                const tasksList = document.getElementById('tasks-list');
                
                tasksList.innerHTML = tasks.map(task => `
                    <div class="card">
                        <h3>${task.nome}</h3>
                        <p>${task.descricao}</p>
                        <p>
                            <span class="status-badge status-${task.status.replace(' ', '-')}">${task.status}</span>
                            <span class="priority-badge priority-${task.prioridade}">${task.prioridade}</span>
                        </p>
                        ${task.prazo ? `<p><strong>Prazo:</strong> ${new Date(task.prazo).toLocaleDateString()}</p>` : ''}
                        <div>
                            <button class="btn btn-success" onclick="toggleTaskStatus(${task.id}, '${task.status}')">
                                ${task.status === 'concluido' ? 'Marcar Pendente' : 'Marcar Conclu√≠do'}
                            </button>
                            <button class="btn btn-danger" onclick="deleteTask(${task.id})">Excluir</button>
                        </div>
                    </div>
                `).join('');
            } catch (error) {
                document.getElementById('tasks-list').innerHTML = '<div class="error-message">Erro ao carregar tarefas</div>';
            }
        }

        async function loadProjectsForSelect() {
            try {
                const projects = await apiCall('/projects');
                const select = document.getElementById('task-project');
                if (select) {
                    select.innerHTML = '<option value="">Selecione um projeto</option>' +
                        projects.map(project => `<option value="${project.id}">${project.nome}</option>`).join('');
                }
            } catch (error) {
                console.error('Erro ao carregar projetos para select');
            }
        }

        async function createTask() {
            const name = document.getElementById('task-name').value;
            const description = document.getElementById('task-description').value;
            const priority = document.getElementById('task-priority').value;
            const projectId = document.getElementById('task-project').value;
            const responsibleId = document.getElementById('task-responsible').value;
            const deadline = document.getElementById('task-deadline').value;
            const time = document.getElementById('task-time').value;
            
            if (!name || !description || !projectId) {
                showMessage('Preencha todos os campos obrigat√≥rios', 'error');
                return;
            }
            
            const taskData = {
                nome: name,
                descricao: description,
                prioridade: priority,
                projeto_id: parseInt(projectId)
            };
            
            if (responsibleId) taskData.responsavel_id = parseInt(responsibleId);
            if (deadline) taskData.prazo = deadline;
            if (time) taskData.horario = time;
            
            try {
                await apiCall('/tasks', 'POST', taskData);
                
                showMessage('Tarefa criada com sucesso!');
                document.getElementById('task-name').value = '';
                document.getElementById('task-description').value = '';
                document.getElementById('task-priority').value = 'normal';
                document.getElementById('task-project').value = '';
                document.getElementById('task-responsible').value = '';
                document.getElementById('task-deadline').value = '';
                document.getElementById('task-time').value = '';
                loadTasks();
            } catch (error) {
                // Erro j√° tratado no apiCall
            }
        }

        async function toggleTaskStatus(id, currentStatus) {
            const endpoint = currentStatus === 'concluido' ? `/tasks/${id}/incomplete` : `/tasks/${id}/complete`;
            
            try {
                await apiCall(endpoint, 'PUT');
                showMessage('Status da tarefa atualizado!');
                loadTasks();
            } catch (error) {
                // Erro j√° tratado no apiCall
            }
        }

        async function deleteTask(id) {
            if (!confirm('Tem certeza que deseja excluir esta tarefa?')) return;
            
            try {
                await apiCall(`/tasks/${id}`, 'DELETE');
                showMessage('Tarefa exclu√≠da com sucesso!');
                loadTasks();
            } catch (error) {
                // Erro j√° tratado no apiCall
            }
        }

        // COMENT√ÅRIOS
        async function loadComments() {
            try {
                const comments = await apiCall('/comments');
                const commentsList = document.getElementById('comments-list');
                
                commentsList.innerHTML = comments.map(comment => `
                    <div class="card">
                        <p>${comment.conteudo}</p>
                        <p><small>Tarefa ID: ${comment.tarefa_id} | Autor ID: ${comment.autor_id || 'An√¥nimo'}</small></p>
                        <p><small>${new Date(comment.criado_em).toLocaleString()}</small></p>
                        <button class="btn btn-danger" onclick="deleteComment(${comment.id})">Excluir</button>
                    </div>
                `).join('');
            } catch (error) {
                document.getElementById('comments-list').innerHTML = '<div class="error-message">Erro ao carregar coment√°rios</div>';
            }
        }

        async function loadTasksForSelect() {
            try {
                const tasks = await apiCall('/tasks');
                const select = document.getElementById('comment-task');
                if (select) {
                    select.innerHTML = '<option value="">Selecione uma tarefa</option>' +
                        tasks.map(task => `<option value="${task.id}">${task.nome}</option>`).join('');
                }
            } catch (error) {
                console.error('Erro ao carregar tarefas para select');
            }
        }

        async function submitComment() {
            const content = document.getElementById('comment-content').value;
            const taskId = document.getElementById('comment-task').value;
            const authorId = document.getElementById('comment-author').value;
            
            if (!content || !taskId) {
                showMessage('Preencha todos os campos obrigat√≥rios', 'error');
                return;
            }
            
            const commentData = {
                conteudo: content,
                tarefa_id: parseInt(taskId)
            };
            
            if (authorId) commentData.autor_id = parseInt(authorId);
            
            try {
                await apiCall('/comments', 'POST', commentData);
                
                showMessage('Coment√°rio criado com sucesso!');
                document.getElementById('comment-content').value = '';
                document.getElementById('comment-task').value = '';
                document.getElementById('comment-author').value = '';
                loadComments();
            } catch (error) {
                // Erro j√° tratado no apiCall
            }
        }

        async function deleteComment(id) {
            if (!confirm('Tem certeza que deseja excluir este coment√°rio?')) return;
            
            try {
                await apiCall(`/comments/${id}`, 'DELETE');
                showMessage('Coment√°rio exclu√≠do com sucesso!');
                loadComments();
            } catch (error) {
                // Erro j√° tratado no apiCall
            }
        }

        // Inicializa√ß√£o
        document.addEventListener('DOMContentLoaded', function() {
            loadSectionData('users');
        });
    </script>
</body>
</html>